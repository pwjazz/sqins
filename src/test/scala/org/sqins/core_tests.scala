/*
Copyright (c) 2012, Percy Wegmann
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

package org.sqins

import java.sql._
import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers
import Implicits._

// Define our Scala model
case class Invoice(id: Long = 0, description: String)

case class LineItem(id: Long = 0, invoice_id: Long, amount: BigDecimal, ts: Timestamp = new Timestamp(System.currentTimeMillis))

// Define our database tables
object Invoice extends Table[Invoice]("invoice") {
  val id = Column[Long]("id")
  val description = Column[String]("description")

  columns = Seq(id, description)
}

object LineItem extends Table[LineItem]("line_item") {
  val id = Column[Long]("id").autoGenerated
  val invoice_id = Column[Long]("invoice_id")
  val amount = Column[BigDecimal]("amount")
  val ts = Column[Timestamp]("ts").autoGenerated

  columns = Seq(id, invoice_id, amount, ts)
}

/**
 * Test the basic operation of sqins queries
 */
class FirstSpec extends FlatSpec with ShouldMatchers {
  // Set up a connection
  // Note - the connection is only needed to run queries
  Class.forName("org.postgresql.Driver");
  val url = "jdbc:postgresql://localhost/sqins"
  val props = new java.util.Properties()
  props.setProperty("user", "sqins")
  props.setProperty("password", "sqins")
  // TODO: make this implicit
  val conn = DriverManager.getConnection(url, props);

  "The SQL function" should "construct a generic SQL query that is usable for DML and other stuff not supported natively by sqins" in {
    SQL("""
        DROP TABLE IF EXISTS line_item;
        DROP TABLE IF EXISTS invoice;
        
        create table invoice (
          id SERIAL,
          description VARCHAR(255),
          primary key(id));
        
        create table line_item (
          id SERIAL,
          invoice_id BIGINT,
          amount MONEY,
          ts TIMESTAMP DEFAULT NOW(),
          primary key(id)); 
        
        alter table line_item add constraint fk_line_item_invoice  foreign key (invoice_id) references invoice(id);
        """).executeUpdate(conn)
  }

  "The INSERT function" should "be able to construct an insert query using full table names and specific columns" in {
    // Define some query builder methods
    def insertInvoice(invoice: Invoice) = (
      INSERT INTO Invoice(Invoice.description)
      VALUES (?(invoice.description)))

    val invoice = Invoice(description = "An invoice")
    insertInvoice(invoice)(conn) should equal(1)
  }

  it should "also be able to construct an insert query using table aliases and whole rows" in {
    val i = Invoice AS "i"
    val li = LineItem AS "li"

    def insertLineItem(lineItem: LineItem) = (
      INSERT INTO li
      VALUES (li.?(lineItem)))

    val lineItem = LineItem(invoice_id = 1, amount = 56.78)
    insertLineItem(lineItem)
  }

  var simpleSelectQuery:SelectStatement[Invoice] = null
  "A simple select statement" should "be constructable using projections" in {
     simpleSelectQuery = SELECT(Invoice.*) FROM (Invoice)
  }
  
  var simpleSelectResult:SelectResult[Invoice] = null
  it should "act as a function that takes a connection and returns a typed SelectResult" in {
    simpleSelectResult = simpleSelectQuery(conn)
  }
  
  "A SelectResult" should "allow iteration over the rows" in {
    simpleSelectResult.foreach(row => {
      row.id should equal(1)
      row.description should equal("An invoice")
    })
  }
  
  it should "include the correct number of rows" in {
    simpleSelectResult.toList.length should equal(1)
  }

  val i = Invoice AS "i"
  val li = LineItem AS "li"
  
  def findLineItemsForInvoice(invoiceId: Long) = (
    SELECT DISTINCT (i.*, li.*, MAX(li.amount) AS "the_max", FN("MIN")(li.amount), ?(5))
    FROM (i INNER_JOIN li ON i.id == li.invoice_id && i.id == li.invoice_id)
    WHERE (i.id == ?(invoiceId) && NOT(i.id <> ?(5000)))
    ORDER_BY (i.id ASC, li.ts DESC)
    GROUP_BY (i.*, li.id, li.invoice_id, li.ts))

  var query = findLineItemsForInvoice(1)
  "The query" should "have the correct SQL expression" in {
    query.expression should equal(
      """SELECT DISTINCT i.id, i.description, li.id, li.invoice_id, li.amount, li.ts, MAX(li.amount) AS the_max, MIN(li.amount), ?
FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id AND i.id = li.invoice_id
WHERE i.id = ? AND NOT i.id <> ?
GROUP BY i.id, i.description, li.id, li.invoice_id, li.ts
ORDER BY i.id ASC, li.ts DESC""")
  }

  "A single-table query" should "return an Iterable of the single row type" in {
    (SELECT(i.*) FROM i)(conn).isInstanceOf[Iterable[Invoice]]
  }

  "The query" should "return a single row with the correct values" in {
    // Run the query
    val result: Iterable[(Invoice, LineItem, BigDecimal, BigDecimal, Int)] = query(conn)
    result.foreach { row =>
      {
        row._1.isInstanceOf[Invoice] should be(true)
        row._1.id should equal(1)
        row._1.description should equal("An invoice")
        row._2.isInstanceOf[LineItem] should be(true)
        row._2.id should equal(1)
        row._2.invoice_id should equal(1)
        row._2.amount should equal(56.78)
        row._3 should equal(56.78)
        row._4 should equal(56.78)
        row._5 should equal(5)
      }
    }
  }
}