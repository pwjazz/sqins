/*
Copyright (c) 2012, Percy Wegmann
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

package org.sqins

import java.sql.{ Connection, DriverManager, Timestamp, PreparedStatement, ResultSet }
import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers
import org.sqins.Implicits._

// Define our Scala model
case class Invoice(id: Long = -1,
                   description: String,
                   image: Option[Array[Byte]] = None) // Note - it would be smart to put images and other large binary data into their own tables to avoid reading them unnecessarily

case class LineItem(id: Long = -1,
                    invoice_id: Long,
                    amount: BigDecimal,
                    ts: Timestamp = new Timestamp(System.currentTimeMillis))

// Define our database tables
class InvoiceTable extends Table[Invoice, Long]("invoice") {
  val id = Column[Long]("id").autoGenerated
  val description = Column[String]("description")
  val image = Column[Option[Array[Byte]]]("image")

  primaryKey(id)
  columns(id, description, image)
}

class LineItemTable extends Table[LineItem, Long]("line_item") {
  val id = Column[Long]("id").autoGenerated
  val invoice_id = Column[Long]("invoice_id")
  val amount = Column[BigDecimal]("amount")
  val ts = Column[Timestamp]("ts").autoGenerated

  primaryKey(id)
  columns(id, invoice_id, amount, ts)
}

/**
 * Test the basic operation of sqins queries
 */
class CoreSpec extends FlatSpec with ShouldMatchers with DBTest {
  // Set up variables for tables
  val invoice = new InvoiceTable()
  val line_item = new LineItemTable()

  // Set up aliases too
  val i = invoice AS "i"
  val li = line_item AS "li"

  "The SQL function" should "construct a generic SQL query that is usable for DML and other stuff not supported natively by sqins" in {
    SQL("""
        DROP TABLE IF EXISTS line_item;
        DROP TABLE IF EXISTS invoice;
        
        create table invoice (
          id SERIAL,
          description VARCHAR(255),
          image BYTEA,
          primary key(id));
        
        create table line_item (
          id SERIAL,
          invoice_id BIGINT,
          amount DECIMAL(22,2),
          ts TIMESTAMP DEFAULT NOW(),
          primary key(id)); 
        
        alter table line_item add constraint fk_line_item_invoice  foreign key (invoice_id) references invoice(id);
        """).executeUpdate(conn)
  }

  "A SQL query" should "provide useful error reporting" in {
    // ?(5) binds the value 5 into the query
    val query = SQL("INVALID_SQL ?", ?(5))

    try {
      query.executeQuery(conn)
    } catch {
      case e: Exception => {
        e.getClass() should equal(classOf[SQLError])
        e.getMessage.indexOf("""Error executing SQL "INVALID_SQL ?" with params (5) failed: ERROR: syntax error at or near "INVALID_SQL"""") should equal(0)
      }
    }
  }

  var insertedInvoiceId: Option[Long] = null

  "The INSERT function" should "be able to construct an insert query using full table names and specific columns" in {
    // Define some query builder methods
    def insertInvoice(invoice: Invoice) = (
      INSERT INTO i(i.description)
      VALUES (?(invoice.description)))

    val invoice = Invoice(description = "An invoice")
    insertedInvoiceId = insertInvoice(invoice)(conn)
    insertedInvoiceId should equal(Some(1))
  }

  it should "also be able to construct an insert query using table aliases and whole rows" in {
    val ia = i AS "ia"
    val lia = li AS "lia"

    insertedInvoiceId match {
      case Some(invoiceId: Long) => {
        def insertLineItem(lineItem: LineItem) = (
          INSERT INTO li
          VALUES (lineItem))

        val lineItem = LineItem(invoice_id = 1, amount = 25)
        insertLineItem(lineItem)(conn)
      }

      case None => fail("There should have been an invoice id")
    }
  }

  "An UPDATE statement" should "return the number of rows updated" in {
    val query = (
      UPDATE(li)
      SET (li.amount := ?(56.77), li.invoice_id := li.invoice_id))

    query(conn) should equal(1)
  }

  it should "support a WHERE clause" in {
    val query = (
      UPDATE(li)
      SET (li.amount := ?(56.79))
      WHERE (li.invoice_id == ?(1) && li.invoice_id <> li.id))

    query(conn) should equal(0)
  }

  it should "allow setting whole rows" in {
    val newLineItem = LineItem(id = 1, invoice_id = 1, amount = 56.78)

    val query = UPDATE(li) SET (newLineItem)

    query.expression should equal("""|UPDATE line_item AS li
                                     |SET invoice_id = ?, amount = ?
                                     |WHERE li.id = ?""".stripMargin)
    query(conn) should equal(1)
  }

  var simpleSelectQuery: SelectQuery[Invoice] = null
  "A simple SELECT statement" should "be constructable using projections" in {
    simpleSelectQuery = SELECT(i.*) FROM (i)
  }

  var simpleSelectResult: SelectResult[Invoice] = null
  it should "act as a function that takes a connection and returns a typed SelectResult" in {
    simpleSelectResult = simpleSelectQuery(conn)
  }

  "A SelectResult" should "include the correct number of rows" in {
    simpleSelectResult.toList.length should equal(1)
  }

  it should "allow iteration over the rows" in {
    simpleSelectResult.foreach(row => {
      row.id should equal(1)
      row.description should equal("An invoice")
    })
  }

  "A SELECT statement" should "be able to return scalar values" in {
    val query: SelectQuery[Long] = SELECT(i.id) FROM (i)

    query.expression should equal(
      """|SELECT i.id
           |FROM invoice AS i""".stripMargin)
  }

  it should "be writeable on multiple lines by wrapping in parentheses" in {
    val query: SelectQuery[Long] = (
      SELECT(i.id)
      FROM (i))

    query.expression should equal(
      """|SELECT i.id
           |FROM invoice AS i""".stripMargin)
  }

  it should "be able to contain bound scalar values in the select clause" in {
    val query: SelectQuery[Int] = SELECT(?(5)) FROM (i)

    query.expression should equal(
      """|SELECT ?
           |FROM invoice AS i""".stripMargin)
  }

  it should "be able to select individual fields into tuples" in {
    val query: SelectQuery[Tuple2[Long, String]] = SELECT(i.id, i.description) FROM (i)
  }

  it should "be able to contain joins" in {
    val query: SelectQuery[Tuple2[Invoice, LineItem]] = (
      SELECT(i.*, li.*)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id))

    query.expression should equal(
      """|SELECT i.id, i.description, i.image, li.id, li.invoice_id, li.amount, li.ts
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id""".stripMargin)

    query(conn).foreach(row => {
      row._1.id should equal(1)
      row._1.description should equal("An invoice")
      row._2.id should equal(1)
      row._2.invoice_id should equal(1)
      row._2.amount should equal(56.78)
    })
  }

  it should "be able to contain joins with multiple conditions and negations" in {
    val query: SelectQuery[Tuple2[Invoice, LineItem]] = (
      SELECT(i.*, li.*)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id && NOT(i.id <> ?(5000))))

    query.expression should equal(
      """|SELECT i.id, i.description, i.image, li.id, li.invoice_id, li.amount, li.ts
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id AND NOT i.id <> ?""".stripMargin)
  }

  it should "be able to contain projections along with individual columns" in {
    val query: SelectQuery[Tuple2[Invoice, BigDecimal]] = (
      SELECT(i.*, li.amount)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id))

    query.expression should equal(
      """|SELECT i.id, i.description, i.image, li.amount
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id""".stripMargin)
  }

  it should "be able to support distinct queries" in {
    val query: SelectQuery[Tuple2[Invoice, BigDecimal]] = (
      SELECT DISTINCT (i.*, li.amount)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id))

    query.expression should equal(
      """|SELECT DISTINCT i.id, i.description, i.image, li.amount
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id""".stripMargin)
  }

  it should "support where conditions" in {
    val query = (
      SELECT DISTINCT (i.*, li.amount)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id)
      WHERE (i.id == ?(1)))

    query.expression should equal(
      """|SELECT DISTINCT i.id, i.description, i.image, li.amount
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id
           |WHERE i.id = ?""".stripMargin)
  }

  it should "be buildable in a functional style" in {
    def buildQuery(invoiceId: Long) = (
      SELECT DISTINCT (i.*, li.amount)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id)
      WHERE (i.id == ?(invoiceId)))

    buildQuery(1).expression should equal(
      """|SELECT DISTINCT i.id, i.description, i.image, li.amount
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id
           |WHERE i.id = ?""".stripMargin)
  }

  it should "support ordering in default, ascending and descending order" in {
    val query = (
      SELECT DISTINCT (i.*, li.amount)
      FROM (i INNER_JOIN li ON i.id == li.invoice_id)
      ORDER_BY (i.id, i.id ASC, li.amount DESC))

    query.expression should equal(
      """|SELECT DISTINCT i.id, i.description, i.image, li.amount
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id
           |ORDER BY i.id, i.id ASC, li.amount DESC""".stripMargin)
  }

  it should "support aggregations" in {
    val query: SelectQuery[Tuple2[Long, BigDecimal]] = (
      SELECT(i.id, MAX(li.amount))
      FROM (i INNER_JOIN li ON i.id == li.invoice_id)
      GROUP_BY (i.id))

    query.expression should equal(
      """|SELECT i.id, MAX(li.amount)
           |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id
           |GROUP BY i.id""".stripMargin)
  }

  it should "support LIMIT and OFFSET clauses" in {
    val query: SelectQuery[Invoice] = (
      SELECT(i.*)
      FROM (i)
      LIMIT ?(5)
      OFFSET ?(10))

    query.expression should equal(
      """|SELECT i.id, i.description, i.image
           |FROM invoice AS i
           |LIMIT ?
           |OFFSET ?""".stripMargin)

    query(conn).toList.length should equal(0)
  }

  it should "support the use of strings to plug in expressions for unsupported syntax" in {
    val query: SelectQuery[Invoice] = (
      SELECT(i.*)
      FROM (i)
      WHERE (i.id == EXPR("(SELECT MAX(id) FROM line_item)")))

    query.expression should equal(
      """|SELECT i.id, i.description, i.image
           |FROM invoice AS i
           |WHERE i.id = (SELECT MAX(id) FROM line_item)""".stripMargin)

    query(conn).toList.length should equal(1)
  }

  "A SELECT query" should "allows us to put together aggregations, wheres and all this other stuff and work correctly" in {
    def findLineItemsForInvoice(invoiceId: Long) = (
      SELECT DISTINCT (i.*, li.*, MAX(li.amount) AS "the_max", FN("MIN")(li.amount), ?(5))
      FROM (i INNER_JOIN li ON i.id == li.invoice_id && i.id == li.invoice_id)
      WHERE (i.id == ?(invoiceId) && NOT(i.id <> ?(5000)))
      ORDER_BY (i.id ASC, li.ts DESC)
      GROUP_BY (i.*, li.id, li.invoice_id, li.ts)
      LIMIT ?(3)
      OFFSET ?(0))

    val query = findLineItemsForInvoice(1)

    query.expression should equal(
      """|SELECT DISTINCT i.id, i.description, i.image, li.id, li.invoice_id, li.amount, li.ts, MAX(li.amount) AS the_max, MIN(li.amount), ?
         |FROM invoice AS i INNER JOIN line_item AS li ON i.id = li.invoice_id AND i.id = li.invoice_id
         |WHERE i.id = ? AND NOT i.id <> ?
         |GROUP BY i.id, i.description, i.image, li.id, li.invoice_id, li.ts
         |ORDER BY i.id ASC, li.ts DESC
         |LIMIT ?
         |OFFSET ?""".stripMargin)

    // Run the query
    val result: Iterable[(Invoice, LineItem, BigDecimal, BigDecimal, Int)] = query(conn)
    result.foreach { row =>
      {
        row._1.isInstanceOf[Invoice] should be(true)
        row._1.id should equal(1)
        row._1.description should equal("An invoice")
        row._2.isInstanceOf[LineItem] should be(true)
        row._2.id should equal(1)
        row._2.invoice_id should equal(1)
        row._2.amount should equal(56.78)
        row._3 should equal(56.78)
        row._4 should equal(56.78)
        row._5 should equal(5)
      }
    }
  }

  "A SELECT query" should "also support setting binary data" in {
    // Define some query builder methods
    def insertInvoice(invoice: Invoice) = (
      INSERT INTO i(i.description)
      VALUES (?(invoice.description)))

    val imageData = scala.io.Source.fromFile(
      new java.io.File("test_image.jpg"))
      .map(_.toByte)
      .toArray
    val invoice = Invoice(description = "An invoice", image = Some(imageData))
    insertInvoice(invoice)(conn)
  }

  "A DELETE query" should "support a WHERE clause" in {
    val query = DELETE FROM line_item WHERE line_item.id == ?(-50)

    query.expression should equal(
      """|DELETE FROM line_item
           |WHERE line_item.id = ?""".stripMargin)

    query(conn)
  }

  it should "return the number of deleted rows" in {
    on(conn) { implicit c =>
      val query = DELETE FROM line_item
      query.expression should equal("DELETE FROM line_item")
      query.go should equal(1)
    }
  }

  case class MyType(wrapped: String)

  "Type mappings" should "be extensible" in {
    // The next line won't compile yet and will complain about not finding an implicit value for parameter typeMapping
    // val boundValue = ?(MyType("coolness"))

    // Let's define our own type mapping for MyType
    object MyTypeMappings {
      implicit val MyTypeMapping = new TypeMapping[MyType](
        _get = (rs: ResultSet, position: Int) => Extraction(MyType(rs.getString(position)), 1),
        _set = (ps: PreparedStatement, position: Int, value: MyType) => ps.setString(position, value.wrapped))

      // Option types require their own type mapping, so let's define that as well
      implicit val OptionMyTypeMapping = new OptionTypeMapping(MyTypeMapping)
    }

    import MyTypeMappings._

    // After defining our implicit type mapping and bringing it into scope, these lines do compile 
    val boundValue = ?(MyType("coolness"))
    val optionValue: Option[MyType] = None
    val boundOptionValue = ?(optionValue)
  }
}